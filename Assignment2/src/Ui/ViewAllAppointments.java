/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui;

import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import com.toedter.calendar.JTextFieldDateEditor;
import JavaMainModel.Encounter;
import JavaMainModel.EncounterHistory;
import JavaMainModel.Patient;
import JavaMainModel.PatientDirectory;
import JavaMainModel.Person;
import JavaMainModel.PersonDirectory;
import JavaMainModel.VitalSigns;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author girish
 */
public class ViewAllAppointments extends javax.swing.JPanel {

    /**
     * Creates new form ViewAllAppointments
     */
    
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    boolean emptyValidationStatus=true;
    boolean validationStatus=true;
    
    public ViewAllAppointments(PatientDirectory patientDirectory,PersonDirectory personDirectory) {
        initComponents();
        JTextFieldDateEditor editor = (JTextFieldDateEditor)jdateNewAptDate.getDateEditor();
        editor.setEditable(false);
        this.patientDirectory=patientDirectory;
        this.personDirectory=personDirectory;
        DisplayData(patientDirectory.getPatients());
        UpdateInformationVisibility(false);
        VitalUpdateVisibility(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jAptTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnDeleteApt = new javax.swing.JButton();
        btnUpdateApt = new javax.swing.JButton();
        lblNewAptDate = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        btnUpdateExistingBooking = new javax.swing.JButton();
        chckBoxRetakeTest = new javax.swing.JCheckBox();
        lblPulse = new javax.swing.JLabel();
        lblTemperature = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();
        txtTemperature = new javax.swing.JTextField();
        lblBloodPressure = new javax.swing.JLabel();
        txtBloodPressure = new javax.swing.JTextField();
        jdateNewAptDate = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(180, 207, 234));
        setForeground(new java.awt.Color(180, 207, 234));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jAptTable.setBackground(new java.awt.Color(204, 204, 204));
        jAptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Appointment Date", "Recent VitalSigns", "Test Undertaken Date"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane1.setViewportView(jAptTable);

    add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 108, 1320, 84));

    jLabel1.setBackground(new java.awt.Color(17, 12, 102));
    jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(17, 12, 102));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Appointment Details");
    jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1030, -1));

    btnDeleteApt.setBackground(new java.awt.Color(17, 12, 102));
    btnDeleteApt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    btnDeleteApt.setForeground(new java.awt.Color(255, 255, 255));
    btnDeleteApt.setText("Delete Appointment");
    btnDeleteApt.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteAptActionPerformed(evt);
        }
    });
    add(btnDeleteApt, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 200, -1, 40));

    btnUpdateApt.setBackground(new java.awt.Color(17, 12, 102));
    btnUpdateApt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    btnUpdateApt.setForeground(new java.awt.Color(255, 255, 255));
    btnUpdateApt.setText("Update Appointment");
    btnUpdateApt.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateAptActionPerformed(evt);
        }
    });
    add(btnUpdateApt, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, -1, 40));

    lblNewAptDate.setBackground(new java.awt.Color(17, 12, 102));
    lblNewAptDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblNewAptDate.setText("Please Select New appointment date:");
    add(lblNewAptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 310, 270, -1));

    lblPatientId.setBackground(new java.awt.Color(17, 12, 102));
    lblPatientId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblPatientId.setText("Patient Id :");
    add(lblPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, 143, -1));

    txtPatientId.setEditable(false);
    txtPatientId.setBackground(new java.awt.Color(255, 255, 255));
    add(txtPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 270, 96, -1));

    btnUpdateExistingBooking.setBackground(new java.awt.Color(17, 12, 102));
    btnUpdateExistingBooking.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    btnUpdateExistingBooking.setForeground(new java.awt.Color(255, 255, 255));
    btnUpdateExistingBooking.setText("Update");
    btnUpdateExistingBooking.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateExistingBookingActionPerformed(evt);
        }
    });
    add(btnUpdateExistingBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 510, 118, 34));

    chckBoxRetakeTest.setBackground(new java.awt.Color(204, 204, 204));
    chckBoxRetakeTest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    chckBoxRetakeTest.setText("Retake Vitals?");
    chckBoxRetakeTest.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            chckBoxRetakeTestStateChanged(evt);
        }
    });
    add(chckBoxRetakeTest, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, 280, -1));

    lblPulse.setBackground(new java.awt.Color(17, 12, 102));
    lblPulse.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblPulse.setText("Pulse Rate :");
    add(lblPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, -1, -1));

    lblTemperature.setBackground(new java.awt.Color(17, 12, 102));
    lblTemperature.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblTemperature.setText("Temperature :");
    add(lblTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 470, -1, -1));
    add(txtPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 390, 100, -1));
    add(txtTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 470, 100, -1));

    lblBloodPressure.setBackground(new java.awt.Color(17, 12, 102));
    lblBloodPressure.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
    lblBloodPressure.setText("Blood Pressure :");
    add(lblBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, -1, -1));
    add(txtBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 430, 100, -1));
    add(jdateNewAptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAptActionPerformed
        int rowIndex=jAptTable.getSelectedRow();
        if(rowIndex<0)
        {
            JOptionPane.showMessageDialog(this,"Please select the Patient you wish to delete");
        }
        for(Patient patient:patientDirectory.getPatients())
        {
            if(patient.getPatient().containsKey(jAptTable.getValueAt(rowIndex, 0)))
            {
                var completePatientEncounterHistory = patient.getPatient().get(jAptTable.getValueAt(rowIndex, 0));
                var patientLastVisitEncounter=completePatientEncounterHistory.getPtnEncounterHistory().size()-1;
                completePatientEncounterHistory.getPtnEncounterHistory().remove(patientLastVisitEncounter);
                if(completePatientEncounterHistory.getPtnEncounterHistory().size()==0)
                {
                    patient.getPatient().remove(jAptTable.getValueAt(rowIndex, 0));
                    patientDirectory.getPatients().remove(patient);
                }
                JOptionPane.showMessageDialog(this,"Appointment Deleted Successfully");
            }
        }
        DisplayData(patientDirectory.getPatients());

    }//GEN-LAST:event_btnDeleteAptActionPerformed

    private void btnUpdateAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAptActionPerformed
        int rowIndex=jAptTable.getSelectedRow();
        if(rowIndex<0)
        {
            JOptionPane.showMessageDialog(this,"Please select the Patient you wish to Update");
        }
        else{
            UpdateInformationVisibility(true);
            txtPatientId.setText(jAptTable.getValueAt(rowIndex, 0).toString());
        }
    }//GEN-LAST:event_btnUpdateAptActionPerformed

    private void btnUpdateExistingBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateExistingBookingActionPerformed

        if(EmptyDateValidation()){
            try {
                if(DateValidation())
                {
                    if(chckBoxRetakeTest.isSelected() )
                    {
                        if(EmpytyFieldValidation() && RegexValidation() )
                        {
                            VitalSigns vitalSigns=new VitalSigns();
                            vitalSigns.setPulse(Integer.parseInt(txtPulse.getText()));
                            vitalSigns.setBloodPressure(Integer.parseInt(txtBloodPressure.getText()));
                            vitalSigns.setTemperature(Integer.parseInt(txtTemperature.getText()));
                            vitalSigns.setDateOfVitals(new Date());
                            Map<Date,VitalSigns> patientEncounter=new HashMap<>();
                            patientEncounter.put(jdateNewAptDate.getDate(),vitalSigns);
                            Encounter encounter=new Encounter();
                            encounter.setPtnEncounter(patientEncounter);
                            for(Patient patient:patientDirectory.getPatients())
                            {
                                if(patient.getPatient().containsKey(Integer.parseInt(txtPatientId.getText())))
                                {
                                    var a = patient.getPatient().get(Integer.parseInt(txtPatientId.getText()));
                                    a.setPtnEncounterHistory(encounter);
                                    patientDirectory.getPatients().remove(a);
                                    patientDirectory.setPatients(patient);
                                }
                            }
                            DisplayData(patientDirectory.getPatients());
                        }
                        else{
                            JOptionPane.showMessageDialog(this,"Field Validation Failed .Please hover over the red fields  to know more.");
                            validationStatus=true;
                        }
                    }
                    else{
                        int rowIndex=jAptTable.getSelectedRow();
                        Encounter encounter=new Encounter();
                        for(Patient patient:patientDirectory.getPatients())
                        {
                            if(patient.getPatient().containsKey(Integer.parseInt(txtPatientId.getText())))
                            {
                                var a = patient.getPatient().get(Integer.parseInt(txtPatientId.getText()));
                                for (Encounter num : a.getPtnEncounterHistory())
                                {
                                    for(Date appointmentDate:num.getPtnEncounter().keySet())
                                    {
                                        if(appointmentDate==jAptTable.getValueAt(rowIndex, 2))
                                        {
                                            var oldVitalSign=num.getPtnEncounter().get(appointmentDate);
                                            Map<Date,VitalSigns> patientEncounter=new HashMap<Date,VitalSigns>();
                                            patientEncounter.put(jdateNewAptDate.getDate(),oldVitalSign);
                                            encounter.setPtnEncounter(patientEncounter);
                                        }
                                    }
                                }
                                var patientLastVisitEncounter=a.getPtnEncounterHistory().size()-1;
                                a.getPtnEncounterHistory().set(patientLastVisitEncounter, encounter);
                            }
                        }
                        DisplayData(patientDirectory.getPatients());
                    }
                }

                else{
                    JOptionPane.showMessageDialog(this,"Field Validation Failed .Please hover over the red fields  to know more.");
                    validationStatus=true;
                }   } catch (ParseException ex) {
                            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                        }
            }
            else{
                JOptionPane.showMessageDialog(this,"Field Validation Failed .Please hover over the red fields  to know more.");
                validationStatus=true;
            }
    }//GEN-LAST:event_btnUpdateExistingBookingActionPerformed

    private void chckBoxRetakeTestStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chckBoxRetakeTestStateChanged
        if(chckBoxRetakeTest.isSelected())
        {
            VitalUpdateVisibility(true);
        }
        else
        {
            VitalUpdateVisibility(false);
        }
    }//GEN-LAST:event_chckBoxRetakeTestStateChanged

    
    
    //Hides the Feilds till the time the checkbox is not selected
    private void UpdateInformationVisibility(boolean value) {
       lblPatientId.setVisible(value);
       txtPatientId.setVisible(value);
       lblNewAptDate.setVisible(value);
       jdateNewAptDate.setVisible(value);
       chckBoxRetakeTest.setVisible(value);
       btnUpdateExistingBooking.setVisible(value);
    }
    
    //Hides the Feilds till the time the checkbox is not selected
    private void VitalUpdateVisibility(boolean value) {
       lblPulse.setVisible(value);
       txtPulse.setVisible(value);
       lblBloodPressure.setVisible(value);
       txtBloodPressure.setVisible(value);
       lblTemperature.setVisible(value);
       txtTemperature.setVisible(value);
    }
    
    private void DisplayData(Set<Patient> patients) {
        try{
        DefaultTableModel model =(DefaultTableModel) jAptTable.getModel();
        model.setRowCount(0);
        if(patients!=null && !patients.isEmpty())
        {
           for(Patient patient:patients){
                int patientId=0;
                boolean status=false;
                String patientName="";
                Date appointmentDate=new Date();
                Map<String,Integer> recentVitalSigns=new HashMap<>();
                Date testUnderTakenDate=new Date();
                for (Map.Entry<Integer, EncounterHistory> pair : patient.getPatient().entrySet())
                {
                    patientId= pair.getKey();
                    for(Map.Entry<Date,VitalSigns> x : pair.getValue().getPtnEncounterHistory().get(pair.getValue().getPtnEncounterHistory().size()-1).getPtnEncounter().entrySet())
                    {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                        
                        try {
                            if(sdf.parse(sdf.format(x.getKey())).after(sdf.parse(sdf.format(new Date()))))
                            {
                                appointmentDate= x.getKey();
                                recentVitalSigns.put("Blood Pressure",  x.getValue().getBloodPressure());
                                recentVitalSigns.put("Pulse Rate",  x.getValue().getPulse());
                                recentVitalSigns.put("Temperature",  x.getValue().getTemperature());
                                testUnderTakenDate=x.getValue().getDateOfVitals();
                                status=true;
                            }
                        } catch (ParseException ex) {
                            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                        }
                    }
                }
                if(status==true)
                {
                    for(Person person:personDirectory.getPersonDirectory())
                {
                    if(person.getPatientID()==(patientId))
                    {
                        patientName=person.getName();
                    }

                }
                model.addRow(new Object[]
                {patientId,patientName,appointmentDate,recentVitalSigns,testUnderTakenDate});
                }
           }
           jAptTable.setModel(model);
        }
        else{
             JOptionPane.showMessageDialog(this,"No Patient Data to display");
             return;
        }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this,"Please fill data before viewing");
        }

    }
    
    private boolean EmptyDateValidation()
    {
        if(jdateNewAptDate.getDate()==null)
        {
            jdateNewAptDate.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            jdateNewAptDate.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }if(jdateNewAptDate.getDate()!=null)
        {
            jdateNewAptDate.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        return validationStatus;
    }
    
    private boolean EmpytyFieldValidation() {
        if(txtPulse.getText()==null && txtPulse.getText().trim()=="" )
        {
            txtPulse.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPulse.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtBloodPressure.getText()==null && txtBloodPressure.getText().trim()=="" )
        {
            txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtBloodPressure.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtTemperature.getText()==null && txtTemperature.getText().trim()=="" )
        {
            txtTemperature.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtTemperature.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        return validationStatus;
    }
    
    
    private boolean DateValidation() throws ParseException {
       SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
       if(!(sdf.parse(sdf.format(jdateNewAptDate.getDate())).after(sdf.parse(sdf.format(new Date())))))
        {
            jdateNewAptDate.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            jdateNewAptDate.setToolTipText("Please enter only future date");
            validationStatus=false;
        }
        if((sdf.parse(sdf.format(jdateNewAptDate.getDate())).after(sdf.parse(sdf.format(new Date())))))
        {
            jdateNewAptDate.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        return validationStatus;
    }
    
    private boolean RegexValidation() {
        
        if(!txtPulse.getText().matches("\\b\\d+\\b"))
        {
            txtPulse.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPulse.setToolTipText("Pleae enter only numbers");
            validationStatus=false;
        }
         if(txtPulse.getText().matches("\\b\\d+\\b"))
        {
            txtPulse.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
         
        if(!txtBloodPressure.getText().matches("\\b\\d+\\b"))
        {
            txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtBloodPressure.setToolTipText("Pleae enter only numbers");
            validationStatus=false;
        }
        if(txtBloodPressure.getText().matches("\\b\\d+\\b"))
        {
            txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        if(!txtTemperature.getText().matches("\\b\\d+\\b"))
        {
            txtTemperature.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtBloodPressure.setToolTipText("Pleae enter only numbers");
            validationStatus=false;
        }
        if(txtTemperature.getText().matches("\\b\\d+\\b"))
        {
            txtTemperature.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        return validationStatus;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteApt;
    private javax.swing.JButton btnUpdateApt;
    private javax.swing.JButton btnUpdateExistingBooking;
    private javax.swing.JCheckBox chckBoxRetakeTest;
    private javax.swing.JTable jAptTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdateNewAptDate;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblNewAptDate;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPulse;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
