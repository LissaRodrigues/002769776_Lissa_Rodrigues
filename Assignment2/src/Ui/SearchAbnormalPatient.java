/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui;

import JavaMainModel.AbnormalPatient;
import JavaMainModel.City;
import JavaMainModel.Community;
import JavaMainModel.EncounterHistory;
import JavaMainModel.Patient;
import JavaMainModel.PatientDirectory;
import JavaMainModel.Person;
import JavaMainModel.PersonDirectory;
import JavaMainModel.VitalSigns;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author girish
 */
public class SearchAbnormalPatient extends javax.swing.JPanel {

    /**
     * Creates new form SearchAbnormalPatient
     */
    
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    public SearchAbnormalPatient(PatientDirectory patientDirectory,PersonDirectory personDirectory) {
        initComponents();
        this.patientDirectory=patientDirectory;
        this.personDirectory=personDirectory;
        initCityCmbx();
        AddTableRow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lnlSearch = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        cmbxCity = new javax.swing.JComboBox<>();
        lblCommunity = new javax.swing.JLabel();
        cmbxCommunity = new javax.swing.JComboBox<>();
        lblCategory = new javax.swing.JLabel();
        cmbxCategory = new javax.swing.JComboBox<>();
        lblAbnormalSign = new javax.swing.JLabel();
        cmbxAbnormalVitals = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSearchAbnormalPtn = new javax.swing.JTable();
        btnsearch = new javax.swing.JButton();
        txtTotalPtn = new javax.swing.JTextField();
        lblTotalPtn = new javax.swing.JLabel();

        setBackground(new java.awt.Color(180, 207, 234));
        setForeground(new java.awt.Color(180, 207, 234));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lnlSearch.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lnlSearch.setForeground(new java.awt.Color(17, 12, 102));
        lnlSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lnlSearch.setText("Search Abnormal Patiets");
        lnlSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(lnlSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 1053, 44));

        lblCity.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCity.setForeground(new java.awt.Color(0, 0, 0));
        lblCity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCity.setText("City :");
        add(lblCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 64, -1, 29));

        cmbxCity.setBackground(new java.awt.Color(255, 255, 255));
        cmbxCity.setForeground(new java.awt.Color(0, 0, 0));
        cmbxCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxCityItemStateChanged(evt);
            }
        });
        add(cmbxCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 70, 144, -1));

        lblCommunity.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCommunity.setForeground(new java.awt.Color(0, 0, 0));
        lblCommunity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCommunity.setText("Community :");
        add(lblCommunity, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 135, -1, -1));

        cmbxCommunity.setBackground(new java.awt.Color(255, 255, 255));
        cmbxCommunity.setForeground(new java.awt.Color(0, 0, 0));
        add(cmbxCommunity, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 137, 144, 26));

        lblCategory.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(0, 0, 0));
        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblCategory.setText("Category :");
        add(lblCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(599, 70, -1, -1));

        cmbxCategory.setBackground(new java.awt.Color(255, 255, 255));
        cmbxCategory.setForeground(new java.awt.Color(0, 0, 0));
        cmbxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Minor", "Adult", " " }));
        cmbxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxCategoryActionPerformed(evt);
            }
        });
        add(cmbxCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 72, -1, 26));

        lblAbnormalSign.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAbnormalSign.setForeground(new java.awt.Color(0, 0, 0));
        lblAbnormalSign.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAbnormalSign.setText("Abnormal Vitals :");
        add(lblAbnormalSign, new org.netbeans.lib.awtextra.AbsoluteConstraints(599, 138, -1, -1));

        cmbxAbnormalVitals.setBackground(new java.awt.Color(255, 255, 255));
        cmbxAbnormalVitals.setForeground(new java.awt.Color(0, 0, 0));
        cmbxAbnormalVitals.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pulse", "Blood Pressure", "Temperature", " " }));
        add(cmbxAbnormalVitals, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 137, 140, 26));

        jSearchAbnormalPtn.setBackground(new java.awt.Color(204, 204, 204));
        jSearchAbnormalPtn.setForeground(new java.awt.Color(0, 0, 0));
        jSearchAbnormalPtn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Id", "Patient Name", "Vital Sign", "Age"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane1.setViewportView(jSearchAbnormalPtn);

    add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 228, 1053, 88));

    btnsearch.setBackground(new java.awt.Color(17, 12, 102));
    btnsearch.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
    btnsearch.setForeground(new java.awt.Color(255, 255, 255));
    btnsearch.setText("Search");
    btnsearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnsearchActionPerformed(evt);
        }
    });
    add(btnsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 460, -1, -1));

    txtTotalPtn.setBackground(new java.awt.Color(255, 255, 255));
    txtTotalPtn.setForeground(new java.awt.Color(0, 0, 0));
    add(txtTotalPtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 378, 117, 31));

    lblTotalPtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
    lblTotalPtn.setForeground(new java.awt.Color(0, 0, 0));
    lblTotalPtn.setText("Total Patients:");
    add(lblTotalPtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 384, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void cmbxCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxCityItemStateChanged

        if (evt.getStateChange() != ItemEvent.SELECTED) {
            initCommunityCmbx();
        }
    }//GEN-LAST:event_cmbxCityItemStateChanged

    private void cmbxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxCategoryActionPerformed

    private void AddTableRow()
    {
       List<AbnormalPatient> AbnormalPatients=new ArrayList<>();
       var city=cmbxCity.getSelectedItem();
       var community=cmbxCommunity.getSelectedItem();
       var vitalSign=cmbxAbnormalVitals.getSelectedItem();
       VitalSigns vitalSigns=new VitalSigns();
       String ageGroups=cmbxCategory.getSelectedItem().toString();
       if(ageGroups.contains("Minor"))
        {
            int lowerLimit=0;
            int upperLimit=18;
            for(Patient patient : patientDirectory.getPatients())
            {
                for (Map.Entry<Integer, EncounterHistory> patienEntry : patient.getPatient().entrySet()) {
                    var encountersList=patienEntry.getValue().getPtnEncounterHistory();
                           int arrayLength=encountersList.size()-1;
                           var lastEncounter=encountersList.get(arrayLength);
                           for( Map.Entry<Date, VitalSigns> encounter:lastEncounter.getPtnEncounter().entrySet())
                           {
                                vitalSigns=encounter.getValue();
                           }
                    for (Person person:personDirectory.getPersonDirectory()) {
                        if(patienEntry.getKey()==person.getPatientID())
                        {
                           if(vitalSign=="Blood Pressure")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(city) &&
                                        person.getHouse().getCommunity_().getCommunity().containsValue(community) &&
                                        person.getAge()<=upperLimit && person.getAge()>=lowerLimit && (vitalSigns.getBloodPressure()>140 || vitalSigns.getBloodPressure() < 70))
                                {
                                    AbnormalPatient AbnormalPtn=new AbnormalPatient();
                                    AbnormalPtn.setPatientID(person.getPatientID());
                                    AbnormalPtn.setPatientName(person.getName());
                                    AbnormalPtn.setAge(person.getAge());
                                    AbnormalPtn.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(AbnormalPtn);
                                }
                           }
                           if(vitalSign=="Pulse")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                  person.getAge()<=upperLimit && person.getAge()>=lowerLimit && (vitalSigns.getPulse() < 40 || vitalSigns.getPulse() > 200))
                                {
                                    AbnormalPatient AbnormalPtn=new AbnormalPatient();
                                    AbnormalPtn.setPatientID(person.getPatientID());
                                    AbnormalPtn.setPatientName(person.getName());
                                    AbnormalPtn.setAge(person.getAge());
                                    AbnormalPtn.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(AbnormalPtn);
                                }
                           }
                           
                           if(vitalSign=="Temperature")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                  person.getAge()>=lowerLimit && vitalSigns.getTemperature() > 102)
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                        }
                    }
                }
            }
        }
       else if(ageGroups.contains("Adult")){
            int lowerLimit=19;
            
            for(Patient patient : patientDirectory.getPatients())
            {
                for (Map.Entry<Integer, EncounterHistory> patienEntry : patient.getPatient().entrySet()) {
                    var encountersList=patienEntry.getValue().getPtnEncounterHistory();
                           int arrayLength=encountersList.size()-1;
                           var lastEncounter=encountersList.get(arrayLength);
                           for( Map.Entry<Date, VitalSigns> encounter:lastEncounter.getPtnEncounter().entrySet())
                           {
                                vitalSigns=encounter.getValue();
                           }
                    for (Person person:personDirectory.getPersonDirectory()) {
                        if(patienEntry.getKey()==person.getPatientID())
                        {
                           if(vitalSign=="Blood Pressure")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(city) &&
                                        person.getHouse().getCommunity_().getCommunity().containsValue(community)
                                        && person.getAge()>=lowerLimit && (vitalSigns.getBloodPressure()>140 || vitalSigns.getBloodPressure() < 70))
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                           if(vitalSign=="Pulse")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                  person.getAge()>=lowerLimit && (vitalSigns.getPulse() < 40 || vitalSigns.getPulse() > 200))
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                           if(vitalSign=="Temperature")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                  person.getAge()>=lowerLimit && vitalSigns.getTemperature()>102)
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                           
                        }
                    }
                }
            }
    }
       else if(ageGroups.contains("All")) {
           for(Patient patient : patientDirectory.getPatients())
            {
                for (Map.Entry<Integer, EncounterHistory> patienEntry : patient.getPatient().entrySet()) {
                    var encountersList=patienEntry.getValue().getPtnEncounterHistory();
                           int arrayLength=encountersList.size()-1;
                           var lastEncounter=encountersList.get(arrayLength);
                           for( Map.Entry<Date, VitalSigns> encounter:lastEncounter.getPtnEncounter().entrySet())
                           {
                                vitalSigns=encounter.getValue();
                           }
                    for (Person person:personDirectory.getPersonDirectory()) {
                        if(patienEntry.getKey()==person.getPatientID())
                        {
                           if(vitalSign=="Blood Pressure")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(city) &&
                                        person.getHouse().getCommunity_().getCommunity().containsValue(community)
                                        && (vitalSigns.getBloodPressure()>140 || vitalSigns.getBloodPressure() < 70))
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                           if(vitalSign=="Pulse")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                  (vitalSigns.getPulse() < 40 || vitalSigns.getPulse() > 200))
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                           if(vitalSign=="Temperature")
                           {
                                if(person.getHouse().getCommunity_().getCommunity().containsKey(cmbxCity.getSelectedItem()) &&
                                  person.getHouse().getCommunity_().getCommunity().containsValue(cmbxCommunity.getSelectedItem()) &&
                                   vitalSigns.getTemperature()>102)
                                {
                                    AbnormalPatient abnormalPatient=new AbnormalPatient();
                                    abnormalPatient.setPatientID(person.getPatientID());
                                    abnormalPatient.setPatientName(person.getName());
                                    abnormalPatient.setAge(person.getAge());
                                    abnormalPatient.setVitalSigns(vitalSigns);
                                    AbnormalPatients.add(abnormalPatient);
                                }
                           }
                           
                        }
                    }
                }
            }
       }
    DisplayData(AbnormalPatients);
    txtTotalPtn.setText(String.valueOf(AbnormalPatients.size()));
    }
    
    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        AddTableRow();
    }//GEN-LAST:event_btnsearchActionPerformed

    
    private void initCommunityCmbx() {
    cmbxCommunity.removeAllItems();
      int count = 0;
      var selectedCity=cmbxCity.getSelectedItem().toString();
      City city=City.valueOf(selectedCity);
      Community community=new Community();
      community.setLstCommunity();
      String[] communities=community.getLstCommunity().get(city);
        for (String community_ : communities) {
            cmbxCommunity.addItem(communities[count++]);
        }
    }
    private void initCityCmbx() {
       cmbxCity.removeAllItems();
       int count = 0;
        City[] cities = City.values();
        for (City city_ : cities) {
            cmbxCity.addItem(cities[count++].toString());
        }
       initCommunityCmbx();
    }
    
    private void DisplayData(List<AbnormalPatient> patients) {
        try
        {
            DefaultTableModel model =(DefaultTableModel) jSearchAbnormalPtn.getModel();
            model.setRowCount(0);
            if(patients!=null && !patients.isEmpty())
            {
                patients.forEach(abnormalPatient -> {
                    Map<String,Integer> recentVitalSigns=new HashMap<>();
                    recentVitalSigns.put("Blood Pressure", abnormalPatient.getVitalSigns().getBloodPressure());
                    recentVitalSigns.put("Pulse", abnormalPatient.getVitalSigns().getPulse());
                    model.addRow(new Object[]
                    {abnormalPatient.getPatientID(),abnormalPatient.getPatientName(),recentVitalSigns,abnormalPatient.getAge()});
                });
                jSearchAbnormalPtn.setModel(model);
            }
            else
            {
                 JOptionPane.showMessageDialog(this,"No Patient Data to display");
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this,"Please Relevant data before viewing");
        }

        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnsearch;
    private javax.swing.JComboBox<String> cmbxAbnormalVitals;
    private javax.swing.JComboBox<String> cmbxCategory;
    private javax.swing.JComboBox<String> cmbxCity;
    private javax.swing.JComboBox<String> cmbxCommunity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jSearchAbnormalPtn;
    private javax.swing.JLabel lblAbnormalSign;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblTotalPtn;
    private javax.swing.JLabel lnlSearch;
    private javax.swing.JTextField txtTotalPtn;
    // End of variables declaration//GEN-END:variables
}
