/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Ui;

import JavaMainModel.Encounter;
import JavaMainModel.EncounterHistory;
import JavaMainModel.Patient;
import JavaMainModel.PatientDirectory;
import JavaMainModel.PersonDirectory;
import JavaMainModel.VitalSigns;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author girish
 */
public class CreateAppointment extends javax.swing.JPanel {

    /**
     * Creates new form CreateAppointment
     */
    
    
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    boolean validationCheck=true;
        
    public CreateAppointment(PersonDirectory personDirectory, PatientDirectory patientDirectory) {
        initComponents();
        initComponents();
        JTextFieldDateEditor editor = (JTextFieldDateEditor)AptDate.getDateEditor();
        editor.setEditable(false);
        FieldVisiblity(false);
        this.personDirectory=personDirectory;
        this.patientDirectory=patientDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCreateApt = new javax.swing.JLabel();
        lblPidEnter = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        btnSearchPtn = new javax.swing.JButton();
        lblEnterDetails = new javax.swing.JLabel();
        lblAptDate = new javax.swing.JLabel();
        lblPulse = new javax.swing.JLabel();
        lblBloodPressure = new javax.swing.JLabel();
        txtPulse = new javax.swing.JTextField();
        txtBloodPressure = new javax.swing.JTextField();
        btnMakeApt = new javax.swing.JButton();
        lblTemperature = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        AptDate = new com.toedter.calendar.JDateChooser();

        setBackground(new java.awt.Color(180, 207, 234));
        setForeground(new java.awt.Color(180, 207, 234));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCreateApt.setBackground(new java.awt.Color(17, 12, 102));
        lblCreateApt.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        lblCreateApt.setForeground(new java.awt.Color(17, 12, 102));
        lblCreateApt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCreateApt.setText("Create Appointment");
        lblCreateApt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(lblCreateApt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, 938, -1));

        lblPidEnter.setBackground(new java.awt.Color(17, 12, 102));
        lblPidEnter.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPidEnter.setForeground(new java.awt.Color(0, 0, 0));
        lblPidEnter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPidEnter.setText("Please Enter Patient Id :");
        lblPidEnter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(lblPidEnter, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 109, 353, -1));

        txtPatientId.setBackground(new java.awt.Color(255, 255, 255));
        txtPatientId.setForeground(new java.awt.Color(0, 0, 0));
        txtPatientId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        add(txtPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(444, 111, 192, 30));

        btnSearchPtn.setBackground(new java.awt.Color(17, 12, 102));
        btnSearchPtn.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        btnSearchPtn.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPtn.setText("Search");
        btnSearchPtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPtnActionPerformed(evt);
            }
        });
        add(btnSearchPtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 80, 33));

        lblEnterDetails.setBackground(new java.awt.Color(17, 12, 102));
        lblEnterDetails.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        lblEnterDetails.setForeground(new java.awt.Color(17, 12, 102));
        lblEnterDetails.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEnterDetails.setText("Enter the Following Details");
        add(lblEnterDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 171, 926, -1));

        lblAptDate.setBackground(new java.awt.Color(17, 12, 102));
        lblAptDate.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblAptDate.setForeground(new java.awt.Color(0, 0, 0));
        lblAptDate.setText("Appointment Date :");
        add(lblAptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 251, -1, -1));

        lblPulse.setBackground(new java.awt.Color(17, 12, 102));
        lblPulse.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblPulse.setForeground(new java.awt.Color(0, 0, 0));
        lblPulse.setText("Pulse Rate :");
        add(lblPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 320, -1, -1));

        lblBloodPressure.setBackground(new java.awt.Color(17, 12, 102));
        lblBloodPressure.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblBloodPressure.setForeground(new java.awt.Color(0, 0, 0));
        lblBloodPressure.setText("Blood Pressure :");
        add(lblBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 389, -1, -1));

        txtPulse.setBackground(new java.awt.Color(255, 255, 255));
        txtPulse.setForeground(new java.awt.Color(0, 0, 0));
        add(txtPulse, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 320, 196, -1));

        txtBloodPressure.setBackground(new java.awt.Color(255, 255, 255));
        txtBloodPressure.setForeground(new java.awt.Color(0, 0, 0));
        add(txtBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 390, 196, -1));

        btnMakeApt.setBackground(new java.awt.Color(17, 12, 102));
        btnMakeApt.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        btnMakeApt.setForeground(new java.awt.Color(255, 255, 255));
        btnMakeApt.setText("Make Appointment");
        btnMakeApt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMakeApt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeAptActionPerformed(evt);
            }
        });
        add(btnMakeApt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 510, 240, 40));

        lblTemperature.setBackground(new java.awt.Color(17, 12, 102));
        lblTemperature.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTemperature.setForeground(new java.awt.Color(0, 0, 0));
        lblTemperature.setText("Temperature");
        add(lblTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 448, -1, -1));

        txtTemperature.setBackground(new java.awt.Color(255, 255, 255));
        txtTemperature.setForeground(new java.awt.Color(0, 0, 0));
        add(txtTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 450, 196, -1));

        AptDate.setBackground(new java.awt.Color(255, 255, 255));
        AptDate.setForeground(new java.awt.Color(0, 0, 0));
        add(AptDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 190, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchPtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPtnActionPerformed
        if(txtPatientId.getText().trim().isEmpty()|| txtPatientId.getText()==null)
        {
            JOptionPane.showMessageDialog(this,"Please Enter a valid Patient Id");
            return;
        }
        boolean patientAvailable=false;
        for(var person : personDirectory.getPersonDirectory())
        {
            if(person.getPatientID()==Integer.parseInt(txtPatientId.getText()))
            {
                patientAvailable=true;
                FieldVisiblity(true);
            }
        }
        if(!patientAvailable)
        {
            JOptionPane.showMessageDialog(this,"Patient does not exist ."
                + "Please register before making an Appointment");
        }
    }//GEN-LAST:event_btnSearchPtnActionPerformed

    private void btnMakeAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeAptActionPerformed
        try
        {
            if(checkForNullorEmptyValue())
            {
                if(RegexValidation()){
                    VitalSigns vitalSigns=new VitalSigns();
                    vitalSigns.setPulse(Integer.parseInt(txtPulse.getText()));
                    vitalSigns.setBloodPressure(Integer.parseInt(txtBloodPressure.getText()));
                    vitalSigns.setTemperature(Integer.parseInt(txtTemperature.getText()));
                    vitalSigns.setDateOfVitals(new Date());
                    Encounter encounter=new Encounter();
                    Map<Date,VitalSigns> patientEncounter=new HashMap<>();
                    patientEncounter.put(AptDate.getDate(),vitalSigns);
                    encounter.setPtnEncounter(patientEncounter);
                    if(patientDirectory.getPatients().size()>0)
                    {
                        boolean patientPresent=false;
                        for(Patient patient:patientDirectory.getPatients())
                        {
                            if(patient.getPatient().containsKey(Integer.parseInt(txtPatientId.getText())))
                            {
                                patientPresent=true;
                                var a = patient.getPatient().get(Integer.parseInt(txtPatientId.getText()));
                                a.setPtnEncounterHistory(encounter);
                                patientDirectory.getPatients().remove(a);
                                patientDirectory.setPatients(patient);
                            }
                        }
                        if(!patientPresent)
                        {
                            EncounterHistory patientHistory=new EncounterHistory();
                            patientHistory.setPtnEncounterHistory(encounter);
                            Map<Integer,EncounterHistory> newPatientHistory=new HashMap<>();
                            newPatientHistory.put(Integer.parseInt(txtPatientId.getText()),patientHistory);
                            Patient patient=new Patient();
                            patient.setPatient(newPatientHistory);
                            patientDirectory.setPatients(patient);
                        }
                    }
                    else
                    {
                        EncounterHistory patientHistory=new EncounterHistory();
                        patientHistory.setPtnEncounterHistory(encounter);
                        Map<Integer,EncounterHistory> newPatientHistory=new HashMap<>();
                        newPatientHistory.put(Integer.parseInt(txtPatientId.getText()),patientHistory);
                        Patient patient=new Patient();
                        patient.setPatient(newPatientHistory);
                        patientDirectory.setPatients(patient);
                    }
                    JOptionPane.showMessageDialog(this,"Appointment Made Successfully");
                }
                else{
                    JOptionPane.showMessageDialog(this,"Validation Failed .Please hover over red field to know more");
                    validationCheck=true;
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Validation Failed .Please hover over red field to know more");
                validationCheck=true;
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this,"Error Occured.Appointment Could not be made");
        }
    }//GEN-LAST:event_btnMakeAptActionPerformed

    
    private boolean RegexValidation() throws ParseException {
          SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
       if(!(sdf.parse(sdf.format(AptDate.getDate())).after(sdf.parse(sdf.format(new Date())))))
        {
            AptDate.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            AptDate.setToolTipText("Please enter a future date");
            validationCheck=false;
        }
        if((sdf.parse(sdf.format(AptDate.getDate())).after(sdf.parse(sdf.format(new Date())))))
        {
            AptDate.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        if(!txtBloodPressure.getText().matches("\\b\\d+\\b"))
        {
            txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtBloodPressure.setToolTipText("Pleae enter a valid Blood Pressure");
            validationCheck=false;
        }
        if(txtBloodPressure.getText().matches("\\b\\d+\\b"))
        {
            txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        if(!txtPulse.getText().matches("\\b\\d+\\b"))
        {
            txtPulse.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPulse.setToolTipText("Pleae enter a valid Pulse Rate");
            validationCheck=false;
        }
        if(txtPulse.getText().matches("\\b\\d+\\b"))
        {
            txtPulse.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        if(!txtTemperature.getText().matches("^(8[0-9]|9[0-9]|10[0-9]|110)$"))
        {
            txtTemperature.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtTemperature.setToolTipText("Pleae enter a valid body temperature");
            validationCheck=false;
        }
        if(txtTemperature.getText().matches("^(8[0-9]|9[0-9]|10[0-9]|110)$"))
        {
            txtTemperature.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        return validationCheck;
    }
    
    private boolean checkForNullorEmptyValue() {
       if(AptDate.getDate()==(null))
       {
           AptDate.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            AptDate.setToolTipText("Field Cannot be left empty");
            validationCheck=false;
       }
       if(AptDate.getDate()!=(null))
       {
           AptDate.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
       }
       
       if(txtPulse.getText().equals(null) || txtPulse.getText().isEmpty())
       {
           txtPulse.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPulse.setToolTipText("Field Cannot be left empty");
            validationCheck=false;
       }
       if(!txtPulse.getText().equals(null) && !txtPulse.getText().isEmpty())
       {
           txtPulse.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
           
       }
       
       if(txtBloodPressure.getText().equals(null) || txtBloodPressure.getText().isEmpty())
       {
           txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtBloodPressure.setToolTipText("Field Cannot be left empty");
            validationCheck=false;
       }
       if(!txtBloodPressure.getText().equals(null) && !txtBloodPressure.getText().isEmpty())
       {
           txtBloodPressure.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
            
       }
       
       if(txtTemperature.getText().equals(null) || txtTemperature.getText().isEmpty())
       {
           txtTemperature.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtTemperature.setToolTipText("Field Cannot be left empty");
            validationCheck=false;
       }
       if(!txtTemperature.getText().equals(null) && !txtTemperature.getText().isEmpty())
       {
           txtTemperature.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
            
       }
       
       return validationCheck;
       
    }
    
    private void FieldVisiblity(boolean value) {
        lblEnterDetails.setVisible(value);
        lblAptDate.setVisible(value);
        AptDate.setVisible(value);
        lblPulse.setVisible(value);
        txtPulse.setVisible(value);
        lblBloodPressure.setVisible(value);
        txtBloodPressure.setVisible(value);
        btnMakeApt.setVisible(value);
        lblTemperature.setVisible(value);
        txtTemperature.setVisible(value);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser AptDate;
    private javax.swing.JButton btnMakeApt;
    private javax.swing.JButton btnSearchPtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAptDate;
    private javax.swing.JLabel lblBloodPressure;
    private javax.swing.JLabel lblCreateApt;
    private javax.swing.JLabel lblEnterDetails;
    private javax.swing.JLabel lblPidEnter;
    private javax.swing.JLabel lblPulse;
    private javax.swing.JLabel lblTemperature;
    private javax.swing.JTextField txtBloodPressure;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtTemperature;
    // End of variables declaration//GEN-END:variables
}
